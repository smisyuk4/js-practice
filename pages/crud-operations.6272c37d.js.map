{"mappings":"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","sources":["src/js/crud-operations.js"],"sourcesContent":["//        сервер для практики запросов\n// https://github.com/typicode/json-server\n// npm install -g json-server\n\n//        запуск сервера\n// npm run server - потому что сделал скрипт запуска сервера\n//        или базовая команда от пакета\n// json-server --watch db.json --port 1986\n\n//  http://localhost:1986/posts/1,\n\n// class formData\n//https://www.youtube.com/watch?v=iJq-NwbZL84\n\n// POST + \n// GET + \n// PUT и PATCH + \n// DELETE\n\nconst refs = {\n    autorForm: document.querySelector('.autor-form'),\n    sendBtn: document.querySelector('.autor-form button'),\n    autorBase: document.querySelector('.autor-base'),\n    getAutor: document.querySelector('.get-autor'),\n    inputAutor: document.querySelectorAll('.get-autor input'),\n    resultGetAutor: document.querySelector('.result'),\n    patchForm: document.querySelector('.patch-autor'),\n    patchBtn: document.querySelector('.patch-autor button'),\n    getBtn: document.querySelector('#get-btn'),\n    delBtn: document.querySelector('#del-btn'),\n    sortBtns: document.querySelector('.sort-buttons'),\n}\n\nrefs.autorForm.addEventListener('input', onInputChanges)\nrefs.autorForm.addEventListener('submit', onClickSendBtn)\n\nrefs.getAutor.addEventListener('input', onInputChangesGet)\nrefs.getAutor.addEventListener('submit', onClickGetBtn)\n// refs.getAutor.addEventListener('click', onClickDelBtn)\n\n// убрать класс форма и сделать через клик на кнопку\n\nrefs.patchForm.addEventListener('input', onInputChangesPatch)\nrefs.patchForm.addEventListener('submit', onClickPatchBtn)\n\nfunction onClickSendBtn(event) {\n    event.preventDefault();\n\n    const autorData = {}\n    let skills = []    \n    const formData = new FormData(event.currentTarget)\n\n    formData.forEach((value, name) => {\n        if (name !== 'skills') {\n            autorData[name] = value.trim()\n        } else {\n            skills = [...skills, value]\n            autorData[name] = skills\n        }        \n    })\n\n    //send userData to storage\n    console.log(autorData)\n\n    POSTAutor(autorData)\n        .then((promice) => {\n            refs.autorBase.innerHTML = ''\n            drawDb()\n        })\n\n    event.target.reset()\n    refs.sendBtn.setAttribute('disabled', true)\n}\n\nfunction onClickGetBtn(event) {\n    event.preventDefault()\n\n    let value\n    const formData = new FormData(event.currentTarget)\n    formData.forEach(item => {\n        if (item) {\n            value = item\n        }\n    })\n\n    //data for GET method\n    console.log(value)\n\n    GETAutor(value)\n\n    event.target.reset()\n    refs.getBtn.setAttribute('disabled', true)\n    refs.delBtn.setAttribute('disabled', true)\n}\n\nfunction onClickDelBtn(event) {\n    event.preventDefault()\n    console.log(event.target)\n\n    let value\n    const formData = new FormData(event.currentTarget)\n    formData.forEach(item => {\n        if (item) {\n            value = item\n        }\n    })\n\n    //data for DELETE method\n    console.log(value)\n\n\n    // event.target.reset()\n    // refs.getBtn.setAttribute('disabled', true)\n    // refs.delBtn.setAttribute('disabled', true)\n}\n\nfunction onClickPatchBtn(event) {\n    event.preventDefault()\n\n    let valueForPatch = {}\n    let skills = [] \n    const formData = new FormData(event.currentTarget)\n\n    formData.forEach((value, name) => {\n        if (value) {\n            valueForPatch[name] = value.trim()\n        }\n        \n        if (name === 'skills') {\n            skills = [...skills, value]\n            valueForPatch[name] = skills\n        }   \n    })\n\n    // data for PATCH\n    console.log(valueForPatch)\n\n    PATCHAutor(valueForPatch)\n    \n    event.target.reset()\n    refs.patchBtn.setAttribute('disabled', true)\n}\n\nfunction onInputChanges(event) {\n    let length = null\n    const formData = new FormData(event.currentTarget)\n\n    formData.forEach((value, name) => {\n        if (value !== '') {\n            length += 1\n        }\n    })\n\n    if (length === 4) {\n        refs.sendBtn.removeAttribute('disabled')\n    }\n}\n\nfunction onInputChangesGet(event) {\n    let length = null\n    const formData = new FormData(event.currentTarget)\n\n    formData.forEach((value, name) => {\n        if (value !== '') {\n            length += 1\n            console.log(name)\n        }\n    })\n\n    if (length === 1) {\n        refs.getBtn.removeAttribute('disabled')\n        refs.delBtn.removeAttribute('disabled')\n    }\n}\n\nfunction onInputChangesPatch(event){\n    let length = null\n    const formData = new FormData(event.currentTarget)\n\n    formData.forEach((value, name) => {\n        if (value !== '') {\n            length += 1\n        }\n    })\n\n    if (length === 2) {\n        refs.patchBtn.removeAttribute('disabled')\n    }\n\n}\n\nfunction fetchWriters(value, options) {\n    const BASE_URL = 'http://localhost:1986/autor/'\n    let url\n    if (value) {\n        url = BASE_URL + value\n    }\n\n    if (!value) {\n        url = BASE_URL\n    }    \n\n    return fetch(url, options)\n        .then(response => {\n            if (!response.ok) {\n                throw new Error(response.status);\n            }\n            return response.json()\n        })\n}\n\nfunction drawDb() {\n    fetchWriters()\n        .then(response => {\n            return response;\n        })\n        .then(resultArr => {\n            console.log(resultArr)\n\n            const markup = resultArr.map(autor => {\n                return markupCardOfWriter(autor)\n            }).join('')\n\n            refs.autorBase.insertAdjacentHTML('beforeend', markup)\n        })\n        .catch(error => {\n            console.log(error)\n            const markup = \"<p class='error'>Sorry! Connection with database is failed 👀</p>\"\n            refs.autorBase.insertAdjacentHTML('beforeend', markup)\n        })\n}\n\ndrawDb()\n\nfunction markupCardOfWriter(autor) {\n    const {id, name, surname, email, number, skills} = autor\n\n    if (!skills) {\n        return `<ul class=\"autor\">\n                <li><span>Id:</span>${id}</li>\n                <li><span>Name:</span>${name}</li>\n                <li><span>Surname:</span>${surname}</li>\n                <li><span>Email:</span>${email}</li>\n                <li><span>Number:</span>${number}</li>\n            </ul>`\n    }\n\n    if (skills) {\n        return `<ul class=\"autor\">\n                <li><span>Id:</span>${id}</li>\n                <li><span>Name:</span>${name}</li>\n                <li><span>Surname:</span>${surname}</li>\n                <li><span>Email:</span>${email}</li>\n                <li><span>Number:</span>${number}</li>\n                <li><span>Skills:</span>${skills.join(', ')}</li>\n            </ul>`\n    }\n}\n\nfunction POSTAutor(autorData) {\n    const options = {\n        method: \"POST\",\n        body: JSON.stringify(autorData),\n        headers: {\n            \"Content-Type\": \"application/json; charset=UTF-8\",\n        },\n    }\n\n    return fetchWriters(\"\", options)\n}\n\nfunction GETAutor(value) {\n    console.log(value)\n\n    fetchWriters(value, {})\n        .then((value) => {\n            refs.resultGetAutor.innerHTML = '<p>result</p>'\n            const markup = markupCardOfWriter(value)\n            refs.resultGetAutor.insertAdjacentHTML('beforeend', markup)\n        })\n}\n\nfunction PATCHAutor(valueForPatch) {\n    const options = {\n        method: \"PATCH\",\n        body: JSON.stringify(valueForPatch),\n        headers: {\n            \"Content-Type\": \"application/json; charset=UTF-8\",\n        },\n    }\n\n    fetchWriters(valueForPatch.id, options)\n        .then((promice) => {\n                refs.autorBase.innerHTML = ''\n                drawDb()\n            })\n}"],"names":["$8916b4093bd5ad3e$var$refs","autorForm","document","querySelector","sendBtn","autorBase","getAutor","inputAutor","querySelectorAll","resultGetAutor","patchForm","patchBtn","getBtn","delBtn","sortBtns","$8916b4093bd5ad3e$var$fetchWriters","value","options","BASE_URL","url","fetch","then","response","ok","Error","status","json","$8916b4093bd5ad3e$var$drawDb","resultArr","console","log","markup","map","autor","$8916b4093bd5ad3e$var$markupCardOfWriter","join","insertAdjacentHTML","catch","error","id","name","surname","email","number","skills","addEventListener","event","length","FormData","currentTarget","forEach","removeAttribute","preventDefault","autorData","trim","method","body","JSON","stringify","headers","$8916b4093bd5ad3e$var$POSTAutor","promice","innerHTML","target","reset","setAttribute","item","$8916b4093bd5ad3e$var$GETAutor","valueForPatch","$8916b4093bd5ad3e$var$PATCHAutor"],"version":3,"file":"crud-operations.6272c37d.js.map"}