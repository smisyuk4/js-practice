{"mappings":"YAmBA,MAAMA,EAAO,CACTC,UAAWC,SAASC,cAAc,eAClCC,QAASF,SAASC,cAAc,sBAChCE,SAAUH,SAASC,cAAc,iBACjCG,UAAWJ,SAASC,cAAc,gBAGtCH,EAAKC,UAAUM,iBAAiB,SAkChC,SAAwBC,GACpB,IAAIC,EAAS,KACI,IAAIC,SAASF,EAAMG,eAE3BC,SAAQ,CAACC,EAAOC,KACP,KAAVD,IACAJ,GAAU,EAAC,IAIJ,IAAXA,GACAT,EAAKI,QAAQW,gBAAgB,W,IA3CrCf,EAAKC,UAAUM,iBAAiB,UAIhC,SAAwBC,GACpBA,EAAMQ,iBAEN,IAAIC,EAAS,GACI,IAAIP,SAASF,EAAMG,eAE3BC,SAAQ,CAACC,EAAOC,KACR,WAATA,EACAI,EAAUJ,GAAQD,EAAMM,QAExBF,EAAS,IAAIA,EAAQJ,GACrBK,EAAUJ,GAAQG,E,IAK1BG,QAAQC,IAAIH,IAqFGI,EAnFLJ,EA4FHK,EARS,CACZC,OAAQ,OACRC,KAAMC,KAAKC,UAAUL,GACrBM,QAAS,CACL,eAAgB,sCAvFnBC,MAAMC,IACH9B,EAAKM,UAAUyB,UAAY,GAC3BC,GAAQ,IAGhBxB,EAAMyB,OAAOC,QACblC,EAAKI,QAAQ+B,aAAa,YAAY,GA4E1C,IAAmBb,C,IAvGnB,MAAMJ,EAAY,GA6ClB,SAASK,EAAaa,GAClB,OAAOC,MAAM,6BAA8BD,GACtCP,MAAKS,IACF,IAAKA,EAASC,GACV,MAAM,IAAIC,MAAMF,EAASG,QAE7B,OAAOH,EAASI,MAAM,G,CAIlC,SAASV,IACLT,IACKM,MAAKS,GACKA,IAEVT,MAAKc,IACFvB,QAAQC,IAAIsB,GAEZ,MAAMC,EAASD,EAAUE,KAAIC,GAezC,SAA4BA,GACxB,MAAMC,GAACA,EAAEjC,KAAEA,EAAIkC,QAAEA,EAAOC,MAAEA,EAAKC,OAAEA,EAAMjC,OAAEA,GAAU6B,EAEnD,IAAK7B,EACD,MAAO,2DACuB8B,iDACEjC,oDACGkC,kDACFC,mDACCC,4BAItC,GAAIjC,EACA,MAAO,2DACuB8B,iDACEjC,oDACGkC,kDACFC,mDACCC,mDACAjC,EAAOkC,KAAK,+B,CAlC/BC,CAAmBN,KAC3BK,KAAK,IAERnD,EAAKM,UAAU+C,mBAAmB,YAAaT,EAAO,IAEzDU,OAAMC,IACHnC,QAAQC,IAAIkC,GAEZvD,EAAKM,UAAU+C,mBAAmB,YADnB,oEACuC,G,CAIlErB,G","sources":["src/js/crud-operations.js"],"sourcesContent":["//        сервер для практики запросов\n// https://github.com/typicode/json-server\n// npm install -g json-server\n\n//        запуск сервера\n// npm run server (потому что сделал скрипт запуска сервера)\n//        или базовая команда от пакета\n// json-server --watch db.json --port 3004\n\n//  http://localhost:3000/posts/1,\n\n// class formData\n//https://www.youtube.com/watch?v=iJq-NwbZL84\n\n// POST\n// GET\n// PUT и PATCH\n// DELETE\n\nconst refs = {\n    autorForm: document.querySelector('.autor-form'),\n    sendBtn: document.querySelector('.autor-form button'),\n    sortBtns: document.querySelector('.sort-buttons'),\n    autorBase: document.querySelector('.autor-base'),\n}\n\nrefs.autorForm.addEventListener('input', onInputChanges)\n\nrefs.autorForm.addEventListener('submit', onClickSendBtn)\n\nconst autorData = {}\n\nfunction onClickSendBtn(event) {\n    event.preventDefault();\n\n    let skills = []    \n    const formData = new FormData(event.currentTarget)\n\n    formData.forEach((value, name) => {\n        if (name !== 'skills') {\n            autorData[name] = value.trim()\n        } else {\n            skills = [...skills, value]\n            autorData[name] = skills\n        }        \n    })\n\n    //send userData to storage\n    console.log(autorData)\n\n    POSTAutor(autorData)\n        .then((promice) => {\n            refs.autorBase.innerHTML = ''\n            drawDb()\n        })\n\n    event.target.reset()\n    refs.sendBtn.setAttribute('disabled', true)\n}\n\nfunction onInputChanges(event) {\n    let length = null\n    const formData = new FormData(event.currentTarget)\n\n    formData.forEach((value, name) => {\n        if (value !== '') {\n            length += 1\n        }\n    })\n\n    if (length === 4) {\n        refs.sendBtn.removeAttribute('disabled')\n    }\n}\n\nfunction fetchWriters(options) {\n    return fetch('http://localhost:3004/user', options)\n        .then(response => {\n            if (!response.ok) {\n                throw new Error(response.status);\n            }\n            return response.json()\n        })\n}\n\nfunction drawDb() {\n    fetchWriters()\n        .then(response => {\n            return response;\n        })\n        .then(resultArr => {\n            console.log(resultArr)\n\n            const markup = resultArr.map(autor => {\n                return markupCardOfWriter(autor)\n            }).join('')\n\n            refs.autorBase.insertAdjacentHTML('beforeend', markup)\n        })\n        .catch(error => {\n            console.log(error)\n            const markup = \"<p class='error'>Sorry! Connection with database is failed 👀</p>\"\n            refs.autorBase.insertAdjacentHTML('beforeend', markup)\n        })\n}\n\ndrawDb()\n\nfunction markupCardOfWriter(autor) {\n    const {id, name, surname, email, number, skills} = autor\n\n    if (!skills) {\n        return `<ul class=\"autor\">\n                <li><span>Id:</span>${id}</li>\n                <li><span>Name:</span>${name}</li>\n                <li><span>Surname:</span>${surname}</li>\n                <li><span>Email:</span>${email}</li>\n                <li><span>Number:</span>${number}</li>\n            </ul>`\n    }\n\n    if (skills) {\n        return `<ul class=\"autor\">\n                <li><span>Id:</span>${id}</li>\n                <li><span>Name:</span>${name}</li>\n                <li><span>Surname:</span>${surname}</li>\n                <li><span>Email:</span>${email}</li>\n                <li><span>Number:</span>${number}</li>\n                <li><span>Skills:</span>${skills.join(', ')}</li>\n            </ul>`\n    }    \n}\n\nfunction POSTAutor(autorData) {\n    const options = {\n        method: \"POST\",\n        body: JSON.stringify(autorData),\n        headers: {\n            \"Content-Type\": \"application/json; charset=UTF-8\",\n        },\n    }\n\n    return fetchWriters(options)\n}"],"names":["$66ab854a65476ae2$var$refs","autorForm","document","querySelector","sendBtn","sortBtns","autorBase","addEventListener","event","length","FormData","currentTarget","forEach","value","name","removeAttribute","preventDefault","skills","$66ab854a65476ae2$var$autorData","trim","console","log","autorData","$66ab854a65476ae2$var$fetchWriters","method","body","JSON","stringify","headers","then","promice","innerHTML","$66ab854a65476ae2$var$drawDb","target","reset","setAttribute","options","fetch","response","ok","Error","status","json","resultArr","markup","map","autor","id","surname","email","number","join","$66ab854a65476ae2$var$markupCardOfWriter","insertAdjacentHTML","catch","error"],"version":3,"file":"crud-operations.e558f9d2.js.map"}