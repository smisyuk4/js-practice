{"mappings":"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","sources":["src/js/crud-operations.js"],"sourcesContent":["//        сервер для практики запросов\n// https://github.com/typicode/json-server\n// npm install -g json-server\n\n//        запуск сервера\n// npm run server - потому что сделал скрипт запуска сервера\n//        или базовая команда от пакета\n// json-server --watch db.json --port 1986\n\n//  http://localhost:1986/posts/1,\n\n// class formData\n//https://www.youtube.com/watch?v=iJq-NwbZL84\n\n// POST + \n// GET\n// PUT и PATCH\n// DELETE\n\nconst refs = {\n    autorForm: document.querySelector('.autor-form'),\n    sendBtn: document.querySelector('.autor-form button'),\n    autorBase: document.querySelector('.autor-base'),\n    getAutor: document.querySelector('.get-autor'),\n    inputAutor: document.querySelectorAll('.get-autor input'),\n    resultGetAutor: document.querySelector('.result'),\n    getBtn: document.querySelector('.get-autor button'),\n    sortBtns: document.querySelector('.sort-buttons'),\n}\n\nrefs.autorForm.addEventListener('input', onInputChanges)\nrefs.autorForm.addEventListener('submit', onClickSendBtn)\n\nrefs.getAutor.addEventListener('input', onInputChangesGet)\nrefs.getAutor.addEventListener('submit', onClickGetBtn)\n\nconst autorData = {}\n\nfunction onClickSendBtn(event) {\n    event.preventDefault();\n\n    let skills = []    \n    const formData = new FormData(event.currentTarget)\n\n    formData.forEach((value, name) => {\n        if (name !== 'skills') {\n            autorData[name] = value.trim()\n        } else {\n            skills = [...skills, value]\n            autorData[name] = skills\n        }        \n    })\n\n    //send userData to storage\n    console.log(autorData)\n\n    POSTAutor(autorData)\n        .then((promice) => {\n            refs.autorBase.innerHTML = ''\n            drawDb()\n        })\n\n    event.target.reset()\n    refs.sendBtn.setAttribute('disabled', true)\n}\n\nfunction onInputChanges(event) {\n    let length = null\n    const formData = new FormData(event.currentTarget)\n\n    formData.forEach((value, name) => {\n        if (value !== '') {\n            length += 1\n        }\n    })\n\n    if (length === 4) {\n        refs.sendBtn.removeAttribute('disabled')\n    }\n}\n\nfunction onInputChangesGet(event) {\n    let length = null\n    const formData = new FormData(event.currentTarget)\n\n    formData.forEach((value, name) => {\n        if (value !== '') {\n            length += 1\n            console.log(name)\n        }\n    })\n\n    if (length === 1) {\n        refs.getBtn.removeAttribute('disabled')\n    }\n\n    //close inputs for change\n    refs.inputAutor.forEach(input => {\n        if (!input.value) {\n            input.setAttribute('disabled', true)\n        }\n    })\n    \n}\n\nfunction fetchWriters(value, options) {\n    const BASE_URL = 'http://localhost:1986/autor/'\n    let url\n    if (value) {\n        url = BASE_URL + value\n    }\n\n    if (!value) {\n        url = BASE_URL\n    }    \n\n    return fetch(url, options)\n        .then(response => {\n            if (!response.ok) {\n                throw new Error(response.status);\n            }\n            return response.json()\n        })\n}\n\nfunction drawDb() {\n    fetchWriters()\n        .then(response => {\n            return response;\n        })\n        .then(resultArr => {\n            console.log(resultArr)\n\n            const markup = resultArr.map(autor => {\n                return markupCardOfWriter(autor)\n            }).join('')\n\n            refs.autorBase.insertAdjacentHTML('beforeend', markup)\n        })\n        .catch(error => {\n            console.log(error)\n            const markup = \"<p class='error'>Sorry! Connection with database is failed 👀</p>\"\n            refs.autorBase.insertAdjacentHTML('beforeend', markup)\n        })\n}\n\ndrawDb()\n\nfunction markupCardOfWriter(autor) {\n    const {id, name, surname, email, number, skills} = autor\n\n    if (!skills) {\n        return `<ul class=\"autor\">\n                <li><span>Id:</span>${id}</li>\n                <li><span>Name:</span>${name}</li>\n                <li><span>Surname:</span>${surname}</li>\n                <li><span>Email:</span>${email}</li>\n                <li><span>Number:</span>${number}</li>\n            </ul>`\n    }\n\n    if (skills) {\n        return `<ul class=\"autor\">\n                <li><span>Id:</span>${id}</li>\n                <li><span>Name:</span>${name}</li>\n                <li><span>Surname:</span>${surname}</li>\n                <li><span>Email:</span>${email}</li>\n                <li><span>Number:</span>${number}</li>\n                <li><span>Skills:</span>${skills.join(', ')}</li>\n            </ul>`\n    }    \n}\n\nfunction POSTAutor(autorData) {\n    const options = {\n        method: \"POST\",\n        body: JSON.stringify(autorData),\n        headers: {\n            \"Content-Type\": \"application/json; charset=UTF-8\",\n        },\n    }\n\n    return fetchWriters(\"\", options)\n}\n\nfunction onClickGetBtn(event) {\n    event.preventDefault()\n\n    let value\n    const formData = new FormData(event.currentTarget)\n    formData.forEach(item => {\n        if (item) {\n            value = item\n        }\n    })\n\n    //data for GET method\n    console.log(value)\n    \n    GETAutor(value)\n\n    event.target.reset()\n    // refs.inputAutor.forEach(input => input.removeAttribute('disabled'))\n    refs.getBtn.setAttribute('disabled', true)\n}\n\nfunction GETAutor(value) {\n    console.log(value)\n\n    fetchWriters(value, {})\n        .then((value) => {\n            refs.resultGetAutor.innerHTML = '<p>result</p>'\n            const markup = markupCardOfWriter(value)\n            refs.resultGetAutor.insertAdjacentHTML('beforeend', markup)\n        })\n}"],"names":["$66ab854a65476ae2$var$refs","autorForm","document","querySelector","sendBtn","autorBase","getAutor","inputAutor","querySelectorAll","resultGetAutor","getBtn","sortBtns","addEventListener","event","length","FormData","currentTarget","forEach","value","name","removeAttribute","preventDefault","skills","$66ab854a65476ae2$var$autorData","trim","console","log","autorData","$66ab854a65476ae2$var$fetchWriters","method","body","JSON","stringify","headers","then","promice","innerHTML","$66ab854a65476ae2$var$drawDb","target","reset","setAttribute","input","item","markup","$66ab854a65476ae2$var$markupCardOfWriter","insertAdjacentHTML","$66ab854a65476ae2$var$GETAutor","options","BASE_URL","url","fetch","response","ok","Error","status","json","resultArr","map","autor","join","catch","error","id","surname","email","number"],"version":3,"file":"crud-operations.29a5d2b4.js.map"}